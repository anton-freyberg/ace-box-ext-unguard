apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Chart.Name }}-user-simulator"
  labels:
    app.kubernetes.io/name: user-simulator
    app.kubernetes.io/component: user-simulator
    app.kubernetes.io/version: "{{ .Values.unguard.userSimulator.tag }}"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/part-of: "{{ .Chart.Name }}"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: user-simulator
      app.kubernetes.io/part-of: "{{ .Chart.Name }}"
  replicas: 3
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: user-simulator
        app.kubernetes.io/part-of: "{{ .Chart.Name }}"
    spec:
      terminationGracePeriodSeconds: 5
      restartPolicy: Always
      containers:
        - name: user-simulator
          image: "{{ .Values.unguard.userSimulator.image }}:{{ .Values.unguard.userSimulator.tag }}"
          env:
            - name: FRONTEND_ADDR
              value: "{{ .Chart.Name }}.{{ .Values.ingress.domain }}/ui"
            - name: SIMULATE_PRIVATE_RANGES
              value: "{{ .Values.unguard.userSimulator.simulatePrivateRanges | default false}}"
            - name: DT_RELEASE_VERSION
              value: "{{ .Values.unguard.userSimulator.tag }}"
            - name: DT_RELEASE_BUILD_VERSION
              value: "{{ .Values.unguard.userSimulator.tag }}"
            - name: DT_RELEASE_PRODUCT
              value: "{{ .Chart.Name }}"
            - name: DT_RELEASE_STAGE
              value: "{{ .Release.Namespace }}"
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
      initContainers:
        - name: wait-for-frontend
          image: curlimages/curl
          command: ["/bin/sh", "-c"]
          # CASP-8983 replace this endpoint with a proper health check endpoint
          args: [ 'while [ $(curl -ksw "%{http_code}" "http://unguard-frontend:80/ui/img/logo.svg" -o /dev/null) -ne 200 ]; do sleep 5; echo "health check failed . Waiting for the service..."; done' ]