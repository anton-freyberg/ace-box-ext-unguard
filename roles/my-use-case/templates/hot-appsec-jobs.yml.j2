controller:
  JCasC:
    configScripts:
      hot-appsec-jobs-config: |
        jobs:
          - script: >
              folder('demo-appsec')
              description('Check out {{ ingress_protocol }}://{{ git_domain }}/{{ git_org_demo }}/{{ git_repo_demo }}/src/branch/main/demo/appsec for more information')
          - script: >
              pipelineJob('demo-appsec/1. Build') {
                parameters {
                  choiceParam('BUILD', ['1','2','3','4','5'], 'Select the build you want to deploy (affects application behavior, github.com/grabnerandi/simplenodeservice for more details)')
                }
                definition {
                  cpsScm {
                    scriptPath('jenkins/build.Jenkinsfile')
                    scm {
                      git {
                          remote { 
                            url('{{ ingress_protocol }}://{{ git_domain }}/{{ git_org_demo }}/{{ git_repo_demo }}')
                            credentials('git-creds-ace')
                          }
                          branch('*/main')
                      }
                    }
                    lightweight()
                  }
                }
              }
          - script: >
              pipelineJob('demo-appsec/2. Deploy') {
                parameters {
                  stringParam('APP_NAME', 'simplenodeservice', 'The name of the service to deploy.')
                  stringParam('TAG_STAGING', '', 'The image of the service to deploy.')
                  stringParam('BUILD', '', 'The version of the service to deploy.')
                  stringParam('ART_VERSION', '', 'The artefact version and hash to deploy.')
                }
                definition {
                  cpsScm {
                    scriptPath('jenkins/deployStaging.Jenkinsfile')
                    scm {
                      git {
                          remote { 
                            url('{{ ingress_protocol }}://{{ git_domain }}/{{ git_org_demo }}/{{ git_repo_demo }}')
                            credentials('git-creds-ace')
                          }
                          branch('*/main')
                      }
                    }
                    lightweight()
                  }
                }
              }
          - script: >
              pipelineJob('demo-appsec/3. Test') {
                parameters {
                  stringParam('APP_NAME', 'simplenodeservice', 'The name of the service to deploy.')
                  stringParam('BUILD', '', 'The version of the service to deploy.')
                  stringParam('ART_VERSION', '', 'The artefact version and hash to deploy.')
                  choiceParam('QG_MODE', ['yaml','dashboard'], 'Use yaml or dashboard for QG')
                }
                definition {
                  cpsScm {
                    scriptPath('jenkins/test_appsec.Jenkinsfile')
                    scm {
                      git {
                          remote { 
                            url('{{ ingress_protocol }}://{{ git_domain }}/{{ git_org_demo }}/{{ git_repo_demo }}')
                            credentials('git-creds-ace')
                          }
                          branch('*/main')
                      }
                    }
                    lightweight()
                  }
                }
              }
          - script: >
              pipelineJob('demo-appsec/4. Deploy production') {
                parameters {
                  stringParam('APP_NAME', 'simplenodeservice', 'The name of the service to deploy.')
                  stringParam('TAG_STAGING', '', 'The image of the service to deploy.')
                  stringParam('BUILD', '', 'The version of the service to deploy.')
                  stringParam('ART_VERSION', '', 'The artefact version and hash to deploy.')
                }
                definition {
                  cpsScm {
                    scriptPath('jenkins/deployProd.Jenkinsfile')
                    scm {
                      git {
                          remote { 
                            url('{{ ingress_protocol }}://{{ git_domain }}/{{ git_org_demo }}/{{ git_repo_demo }}')
                            credentials('git-creds-ace')
                          }
                          branch('*/main')
                      }
                    }
                    lightweight()
                  }
                }
              }
          - script: >
              pipelineJob('demo-appsec/Monitoring as Code') {
                definition {
                  cpsScm {
                    scriptPath('jenkins/mac.Jenkinsfile')
                    scm {
                      git {
                          remote { 
                            url('{{ ingress_protocol }}://{{ git_domain }}/{{ git_org_demo }}/{{ git_repo_demo }}')
                            credentials('git-creds-ace')
                          }
                          branch('*/main')
                      }
                    }
                    lightweight()
                  }
                }
              }
          - script: >
              folder('hot-appsec')
              description('Check out {{ ingress_protocol }}://{{ git_domain }}/{{ hot_appsec_org }}/{{ hot_appsec_repo_name }} for more information')
          - script: >
              pipelineJob('hot-appsec/1. Deploy Unguard') {
                definition {
                  cpsScm {
                    scriptPath('jenkins/deploy.Jenkinsfile')
                    scm {
                      git {
                          remote { 
                            url('{{ ingress_protocol }}://{{ git_domain }}/{{ hot_appsec_org }}/{{ hot_appsec_repo_name }}')
                            credentials('git-creds-ace')
                          }
                          branch('*/main')
                      }
                    }
                    lightweight()
                  }
                }
              }
          - script: >
              pipelineJob('hot-appsec/2. Monitoring as Code') {
                parameters {
                  stringParam('PROJECT', 'base', 'The name of the monaco project to deploy.')
                }
                definition {
                  cpsScm {
                    scriptPath('jenkins/monaco.Jenkinsfile')
                    scm {
                      git {
                          remote { 
                            url('{{ ingress_protocol }}://{{ git_domain }}/{{ hot_appsec_org }}/{{ hot_appsec_repo_name }}')
                            credentials('git-creds-ace')
                          }
                          branch('*/main')
                      }
                    }
                    lightweight()
                  }
                }
              }
          - script: >
              pipelineJob('hot-appsec/3. Destroy Unguard') {
                definition {
                  cpsScm {
                    scriptPath('jenkins/destroy.Jenkinsfile')
                    scm {
                      git {
                          remote { 
                            url('{{ ingress_protocol }}://{{ git_domain }}/{{ hot_appsec_org }}/{{ hot_appsec_repo_name }}')
                            credentials('git-creds-ace')
                          }
                          branch('*/main')
                      }
                    }
                    lightweight()
                  }
                }
              }
          - script: >
              pipelineJob('hot-appsec/4. Monitoring as Code Cleanup') {
                definition {
                  cpsScm {
                    scriptPath('jenkins/monacoclean.Jenkinsfile')
                    scm {
                      git {
                          remote { 
                            url('{{ ingress_protocol }}://{{ git_domain }}/{{ hot_appsec_org }}/{{ hot_appsec_repo_name }}')
                            credentials('git-creds-ace')
                          }
                          branch('*/main')
                      }
                    }
                    lightweight()
                  }
                }
              }
